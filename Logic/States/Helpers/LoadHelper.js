function loadVariables(i,t){this.lastAction=i,this.lastActionY=!1,this.lastActionX=!1,this.direction=1,this.enemyDirection=1,this.auxClimb=0,this.die4Fall=!1,this.firstDie4Fall=!0,this.isJumping=!1,this.isInvulnerable=!1,this.floorData=JSON.parse(this.game.cache.getText("collisionData")),this.isActiveCheckpoint=!1,this.firstFetch=!0,this.firstFetchPotion=!0,this.firstFetchLever=!0,this.firstFetchGirl=!0,this.pickMessage=null,this.pickMessageGirl=null,this.player=null,this.girl=null,this.firstCheck=!0,this.checkpointPosition=t,this.windowSize=[1920,1080],this.holdingWeapon=!1,this.powerUp=1,this.stepsX=[48,320,384,0],this.stepsY=[0,-200,0,-250]}function loadSounds(){this.jump_sound=this.add.audio("sfx_jump"),this.walk_sound=this.add.audio("sfx_walk"),this.die_sound=this.add.audio("sfx_die"),this.shot_sound=this.add.audio("sfx_shot"),this.fall_sound=this.add.audio("sfx_fall"),this.flag_sound=this.add.audio("sfx_flag"),this.background_sound=this.add.audio("sfx_back"),this.pick_weapon_sound=this.add.audio("sfx_pick_weapon"),this.lever_sound=this.add.audio("sfx_lever"),this.door_sound=this.add.audio("sfx_door"),this.background_sound.play("",0,.3,!0)}function loadPlayer(){this.player.enableBody=!0,this.player.smoothed=!1,this.player.scale.set(.8),this.player.anchor.setTo(.25,0),this.player.animations.add("walk",[6,7,8,9],15),this.player.animations.add("walkWeapon",[95,96,97,98],15),this.player.animations.add("slow",[31,32,33,34,35,36],5),this.player.animations.add("slowWeapon",[91,92],5),this.player.animations.add("stop",[0],1),this.player.animations.add("stopWeapon",[90],1),this.player.animations.add("shoot",[92,93],2),this.player.animations.add("jumpSide",[150,151,152,153,154,155,156,157],15),this.player.animations.add("fallJumpSide",[158,159,160,161,162,163,164],15),this.player.animations.add("climbStartUP",[221,220,219,218,217,216,215,214,213],20),this.player.animations.add("climbStartDown",[188,187,121,122,123],15),this.player.animations.add("climbStair",[77,76,75],5),this.player.animations.add("climbStairStop",[79],15),this.player.animations.add("climbEndUP",[213,214,215,216,217,218,219,220,221],15),this.player.animations.add("climbEndDown",[123,122,121,187,188],15),this.player.animations.add("jump",[180,181,182,183,184,185,186,187,188],30),this.player.animations.add("fallJump",[188,187,186,185,184,183,182,181,180],6),this.player.animations.add("swayBar",[203,210],15),this.player.animations.add("climbBarUP",[211,212,213,214,215,216,217,218,219,220,221],15),this.player.animations.add("climbBarDown",[189,190,221],15),this.player.animations.add("fallDie",[240,241],15,!1),this.player.body.setSize(96,220,0,20)}function loadGroups(){this.checkpoints=this.add.group(),this.tiles=this.add.group(),this.menu=this.add.group(),this.doors=this.add.group(),this.levers=this.add.group(),this.stairs=this.add.group(),this.saws=this.add.group(),this.enemies=this.add.group(),this.spikes=this.add.group(),this.weapons=this.add.group(),this.lives=this.add.group(),this.potions=this.add.group(),this.lavas=this.add.group(),this.bosses=this.add.group(),this.bugs=this.add.group(),this.lives.fixedToCamera=!0}function loadLives(){for(var i=0;i<5;i++)this.lives.add(new Heart(this,40*(i+1),20))}function loadPotions(i){for(var t=JSON.parse(this.game.cache.getText("potionData")),a=0;a<t[i].length;a++){var s=t[i][a],e=new Potion(this,s.x,s.y,"potion");this.potions.add(e)}}function loadWeapons(i){for(var t=JSON.parse(this.game.cache.getText("weaponData")),a=0;a<t[i].length;a++){var s=t[i][a],e=new Weapon(this,s.x,s.y,"weapon");this.weapons.add(e)}}function loadCheckpoints(i,t){this.checkpoints.add(new Checkpoint(this,i,t))}function loadSaws(i){for(var t=JSON.parse(this.game.cache.getText("sawData")),a=0;a<t[i].length;a++){var s=t[i][a],e=new Saw(this,s.x,s.y,"saw");this.saws.add(e)}}function loadSpikes(i){for(var t=JSON.parse(this.game.cache.getText("spikeData")),a=0;a<t[i].length;a++){var s=t[i][a],e=new Spike(this,s.x,s.y,"spike");this.spikes.add(e)}}function loadEnemy1(i){for(var t=JSON.parse(this.game.cache.getText("enemyData")),a=0;a<t[i].length;a++){var s=t[i][a],e=new Enemy1(this,s.x,s.y,"enemy1");this.enemies.add(e)}}function loadBoss(i){for(var t=JSON.parse(this.game.cache.getText("bossData")),a=0;a<t[i].length;a++){var s=t[i][a],e=new Boss(this,s.x,s.y,"boss");this.bosses.add(e)}}function loadDoors(i){for(var t=JSON.parse(this.game.cache.getText("doorData")),a=0;a<t[i].length;a++){var s=t[i][a],e=new Door(this,s.x,s.y,"door");this.doors.add(e)}}function loadLevers(i){for(var t=JSON.parse(this.game.cache.getText("leverData")),a=0;a<t[i].length;a++){var s=t[i][a],e=new Lever(this,s.x,s.y,"lever");this.levers.add(e)}}function loadStairs(i){for(var t=JSON.parse(this.game.cache.getText("stairData")),a=0;a<t[i].length;a++){var s=t[i][a],e=new Stair(this,s.x,s.y,s.type);switch(s.type){case 0:e.body.setSize(30,464,33,50);break;case 1:e.body.setSize(30,161,33,50);break;case 2:e.body.setSize(30,464,11,50);break;default:e.body.setSize(30,161,11,50)}this.stairs.add(e)}}function loadLavas(i){for(var t=JSON.parse(this.game.cache.getText("lavaData")),a=0;a<t[i].length;a++){var s=t[i][a],e=new Lava(this,s.x,s.y,"lava",s.isLong);this.lavas.add(e)}}function loadBullets(){this.bullet=this.game.add.weapon(5,"bullet"),this.bullet.bulletKillType=Phaser.Weapon.KILL_WORLD_BOUNDS,this.bullet.bulletSpeed=1200,this.bullet.fireRate=200,this.bullet.fireLimit=10,this.bullet.bullets.setAll("scale.y",.2),this.bullet.bullets.setAll("scale.x",.2),this.bullet.bullets.setAll("body.allowGravity",!1)}function loadTiles(i){for(var t of floors)loadFloorTiles(this,i,t.name,t.isHorizontal)}function loadFloorTiles(i,t,a,s){for(var e=s?findHorizontalTileCollision(t,a,i.floorData):findVerticalTileCollision(t,a,i.floorData),o=0;o<e.length;o++){var d=e[o],h=new Tile(i,d.x,d.y);h.body.setSize(d.bodyWidth,d.bodyHeight,d.offSetX,d.offSetY),i.tiles.add(h)}}function findHorizontalTileCollision(i,t,a){for(var s=[],e=a[i][t],o=e.positionsRange,d=e.bodyWidth,h=e.bodyHeight,n=e.offSetX,l=e.offSetY,r=0;r<o.length;r++)for(var p=o[r],u=o[r].xinit;u<o[r].xend;u++)s.push({y:120*p.y,x:96*u,bodyWidth:d,bodyHeight:h,offSetX:n,offSetY:l});return s}function findVerticalTileCollision(i,t,a){for(var s=[],e=a[i][t],o=e.positionsRange,d=e.bodyWidth,h=e.bodyHeight,n=e.offSetX,l=e.offSetY,r=0;r<o.length;r++)for(var p=o[r],u=o[r].yinit;u<o[r].yend;u++)s.push({y:120*u,x:96*p.x,bodyWidth:d,bodyHeight:h,offSetX:n,offSetY:l});return s}